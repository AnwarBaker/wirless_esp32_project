//ir sender

#include <esp_now.h>
#include <WiFi.h>

#define IR_PIN 14  // GPIO14 connected to IR sensor output

// Receiver MAC
uint8_t receiverMAC[] = {0xE8, 0x6B, 0xEA, 0xD0, 0xDB, 0xF0};

void setup() {
  Serial.begin(115200);
  pinMode(IR_PIN, INPUT);

  // WiFi setup
  WiFi.disconnect(true);
  delay(1000);
  WiFi.mode(WIFI_STA);
  Serial.print("IR Sender MAC: ");
  Serial.println(WiFi.macAddress());

  // Set channel
  WiFi.begin("dummy", "dummy");
  delay(100);
  WiFi.disconnect();
  WiFi.setChannel(1);

  // ESP-NOW init
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW Init Failed");
    while (1);
  }

  // Register receiver as peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, receiverMAC, 6);
  peerInfo.channel = 1;
  peerInfo.ifidx = WIFI_IF_STA;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to Add Peer");
    while (1);
  }

  Serial.println("IR Sender Ready!");
}

void loop() {
  int irValue = digitalRead(IR_PIN); // Read IR sensor (0 = object detected, 1 = no object)
  esp_err_t result = esp_now_send(receiverMAC, (uint8_t *)&irValue, sizeof(irValue));
  
  if (result == ESP_OK) {
    Serial.print("Sent IR Value: ");
    Serial.println(irValue);
  } else {
    Serial.println("Failed to Send");
  }

  delay(200); // Send every 200ms for responsive detection
}













//ldr sender

#include <esp_now.h>
#include <WiFi.h>

#define LDR_PIN 34  // Analog pin for LDR

// Receiver MAC
uint8_t receiverMAC[] = {0xE8, 0x6B, 0xEA, 0xD0, 0xDB, 0xF0};

void setup() {
  Serial.begin(115200);
  pinMode(LDR_PIN, INPUT);

  // WiFi setup
  WiFi.disconnect(true);
  delay(1000);
  WiFi.mode(WIFI_STA);
  Serial.print("LDR Sender MAC: ");
  Serial.println(WiFi.macAddress());

  // Set channel
  WiFi.begin("dummy", "dummy");
  delay(100);
  WiFi.disconnect();
  WiFi.setChannel(1);

  // ESP-NOW init
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW Init Failed");
    while (1);
  }

  // Register receiver as peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, receiverMAC, 6);
  peerInfo.channel = 1;
  peerInfo.ifidx = WIFI_IF_STA;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to Add Peer");
    while (1);
  }

  Serial.println("LDR Sender Ready!");
}

void loop() {
  int ldrValue = analogRead(LDR_PIN);
  esp_err_t result = esp_now_send(receiverMAC, (uint8_t *)&ldrValue, sizeof(ldrValue));
  
  if (result == ESP_OK) {
    Serial.print("Sent LDR Value: ");
    Serial.println(ldrValue);
  } else {
    Serial.println("Failed to Send");
  }

  delay(1000); // Send every 1 second
}











//ultrasonic sender

#include <esp_now.h>
#include <WiFi.h>

#define TRIG_PIN 14
#define ECHO_PIN 12

uint8_t receiverMAC[] = {0xE8, 0x6B, 0xEA, 0xD0, 0xDB, 0xF0}; // Receiver's MAC

void setup() {
  Serial.begin(115200);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Reset WiFi and read MAC
  WiFi.disconnect(true);
  delay(1000);
  WiFi.mode(WIFI_STA);
  Serial.print("Sender MAC: ");
  Serial.println(WiFi.macAddress());

  // Set WiFi Channel
  WiFi.begin("dummy", "dummy");
  delay(100);
  WiFi.disconnect();
  WiFi.setChannel(1);

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW Init Failed");
    while (1);
  }

  // Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, receiverMAC, 6);
  peerInfo.channel = 1;
  peerInfo.ifidx = WIFI_IF_STA;  // Critical fix
  peerInfo.encrypt = false;

  esp_err_t addStatus = esp_now_add_peer(&peerInfo);
  if (addStatus != ESP_OK) {
    Serial.print("Failed to Add Peer. Error: ");
    Serial.println(addStatus);
    while (1);
  }

  Serial.println("Sender Ready!");
}

void loop() {
  // Ultrasonic sensor logic
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  int distance = duration * 0.034 / 2;

  if (distance < 50) {
    esp_err_t result = esp_now_send(receiverMAC, (uint8_t *)&distance, sizeof(distance));
    if (result == ESP_OK) {
      Serial.print("Sent Distance: ");
      Serial.println(distance);
    } else {
      Serial.println("Failed to Send");
    }
  }
  delay(500);
}













//reciever

#include <esp_now.h>
#include <WiFi.h>

#define ULTRASONIC_LED 32  // LED for ultrasonic
#define LDR_LED 33         // LED for LDR
#define IR_LED 27          // LED for IR sensor

// MAC addresses of all senders
uint8_t ultrasonicMAC[] = {0xA0, 0xA3, 0xB3, 0xAB, 0x7A, 0xF8}; // Ultrasonic sender
uint8_t ldrMAC[] = {0xD4, 0x8A, 0xFC, 0xC7, 0xB8, 0xDC};        // LDR sender
uint8_t irMAC[] = {0xD4, 0x8A, 0xFC, 0xCF, 0x85, 0x4C};          // IR sender

void OnDataRecv(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
  const uint8_t *mac = info->src_addr;
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);

  // Check which device sent data
  if (memcmp(mac, ultrasonicMAC, 6) == 0) {
    // Data from ultrasonic sensor
    if (len == sizeof(int)) {
      int distance = *((int*)data);
      Serial.print("Received from Ultrasonic (");
      Serial.print(macStr);
      Serial.print(") - Distance: ");
      Serial.println(distance);
      digitalWrite(ULTRASONIC_LED, HIGH);
      delay(200);
      digitalWrite(ULTRASONIC_LED, LOW);
    }
  } 
  else if (memcmp(mac, ldrMAC, 6) == 0) {
    // Data from LDR
    if (len == sizeof(int)) {
      int ldrValue = *((int*)data);
      Serial.print("Received from LDR (");
      Serial.print(macStr);
      Serial.print(") - Light Level: ");
      Serial.println(ldrValue);
      digitalWrite(LDR_LED, ldrValue < 1000 ? HIGH : LOW); // Turn on LED in dark
    }
  }
  else if (memcmp(mac, irMAC, 6) == 0) {
    // Data from IR sensor
    if (len == sizeof(int)) {
      int irValue = *((int*)data);
      Serial.print("Received from IR (");
      Serial.print(macStr);
      Serial.print(") - Detection: ");
      Serial.println(irValue == 0 ? "Object Detected" : "No Object");
      digitalWrite(IR_LED, irValue == 0 ? HIGH : LOW); // Turn on LED when object detected
    }
  }
}

void setup() {
  Serial.begin(115200);
  
  // Initialize LEDs
  pinMode(ULTRASONIC_LED, OUTPUT);
  pinMode(LDR_LED, OUTPUT);
  pinMode(IR_LED, OUTPUT);
  digitalWrite(ULTRASONIC_LED, LOW);
  digitalWrite(LDR_LED, LOW);
  digitalWrite(IR_LED, LOW);

  // WiFi setup
  WiFi.disconnect(true);
  delay(1000);
  WiFi.mode(WIFI_STA);
  Serial.print("Receiver MAC: ");
  Serial.println(WiFi.macAddress());

  // Set channel
  WiFi.begin("dummy", "dummy");
  delay(100);
  WiFi.disconnect();
  WiFi.setChannel(1);

  // ESP-NOW init
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW Init Failed");
    while (1);
  }

  esp_now_register_recv_cb(OnDataRecv);
  Serial.println("Receiver Ready for 3 Devices!");
}

void loop() {}